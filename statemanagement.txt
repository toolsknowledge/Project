
    - react applications are component based applications.

    - we can create more than one component.

    - we can provide communication between components.

    - communication between components is difficult is applications size is large.

    - we can overcome complexity with state management.

    - redux is the library, used to maintain state management.

Architecture
************

=> store

=> initial state

=> reducer

=> state

=> dispatch

=> subscribe

=> action / type

=> payload / value

=> thunk

=> saga



Ex_1:

    1) create the react application

    > npx create-react-app project1


    2) switch to project1

    > cd project1

    3) download libraries

        => redux

        => react-redux

        => redux-thunk

    > yarn add redux react-redux redux-thunk
    

    4) create the reducer

    ****************************
    project1
          src
            reducer
               reducer.js
    ****************************
    funally "reducer" is ready.


    5) create the store
       deploy the reducer
       apply the middleware
       make the "store" scope to "App"

       index.js


    6) dispatch & subscribe in App Component


    7) separate and moniter the actions

    actions
         actions.js

project2
********
                            **** saga project ****


1) create the react application

    > npx create-react-app project2



2) switch to project

    > cd project2


3) download the libraries

     > redux

     > react-redux

     > redux-saga

    > yarn add redux react-redux redux-saga


4) create the saga actions


**************************************************
project2
       src
         sagas
           sagas.js
*************************************************


5) create the reducer

*************************************************
project2
       src
         reducer
            reducer.js
************************************************



6) create the store
   deploy the reducer
   apply the saga middleware
   and make the scope to App component


    index.js


7) perform dispatch and subscribe in App Component.

    App.js

                                        **** project3 ****

    => DataBase

            MongoDB / MySQL / SQLServer / Oracle

    => Backend

            NodeJS / Java Spring Boot

    => Frontend

            ReactJS with Redux, Redux thunk

    => Cloud

            AWS

AWS
***
    Below Images are Cloud Images

    https://reduxex.s3.ap-southeast-1.amazonaws.com/shirt1.jpg
    https://reduxex.s3.ap-southeast-1.amazonaws.com/shirt2.jpg
    https://reduxex.s3.ap-southeast-1.amazonaws.com/shirt3.jpg
    https://reduxex.s3.ap-southeast-1.amazonaws.com/pant1.jpg
    https://reduxex.s3.ap-southeast-1.amazonaws.com/pant2.jpg
    https://reduxex.s3.ap-southeast-1.amazonaws.com/pant3.jpg


MongoDB
*******

    mongodb+srv://qwerty:Qwerty@123@reduxtest.xw1gu.mongodb.net/Redux?retryWrites=true&w=majority

    Collection Name : products

    ***********************************
    Name : Redux

    Collection : products

    User :  qwerty

    Password : Qwerty@123
    ***********************************


Node Server
***********
    redux-server

    > yarn add express mongodb cors


    server.js



Integration
***********

1) create the react project

    > npx create-react-app project3


2) switch to react application

    > cd project3

3) download the libraries

    1) redux

    2) react-redux

    3) redux-thunk

    4) axios


    > yarn add redux react-redux redux-thunk axios


4) create the types / constants

    identifying the project requirement called as types.

    in our project3 we identifies 3 requirements

   1) HIT_SERVER

           loading = false;

   2) CATCH_POSITIVE_RESPONSE

         loading = true;

   3) CATCH_NEGATIVE_RESPONSE

        loading = true;


***********************************
project3
       src  
         types
           ProductTypes.js
***********************************

    4) implement the Actions

***************************************
project3
       src
         actions
            ProductActions.js
***************************************

    5) implement the reducer

***************************************
project3
       src
         reducer
            ProductReducer.js
***************************************

    6) create the store, deploy the reducer, apply the thunk middleware and make store scope to Products Component


    7) create the App Component

        App.js


                                            ***** CRUD OPERATIONS *****

1) MySQL

2) Node Server

3) ReactJS with Redux, Thunk

MySQL
*****

Password : admin

DataBase Name : redux

Table Name : products

                p_id ,   p_name , p_cost




Node Server
***********

> yarn add express mysql cors

Ex.
    server.js

    1) http://localhost:8080/fetch (GET)

    2) http://localhost:8080/insert   (POST)
                body
                    {
                        p_id,
                        p_name,
                        p_cost
                    }

    3) http://localhost:8080/update   (PUT)
                body{
                    p_id,
                    p_cost
                }

    4) http://localhost:8080/delete   (DELETE)
                body{
                    p_id
                }

Integration of CRUD Operations to React application
***************************************************

> npx create-react-app project4

> cd project4

> yarn add react-router-dom redux react-redux redux-thunk axios


    - react-router-dom module used to implement the single page applications

    - redux used to implement the state management

    - react-redux used to Integrate the state management to react application

    - redux-thunk used to moniter the actions

    - axios used to make the asynchrnous calls.


***********************************************************
project4
      src
        types 
           ProductTypes.js


        actions
          ProductActions.js


        reducer
            ProductReducer.js


        index.js
************************************************************





































































































































































































